@page
@model Group7_SE1733_A01_FE.Pages.NewsArticle.CreateModel
@{
    ViewData["Title"] = "Create News Article";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<h1>Create News Article</h1>

<form method="post" id="createForm">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="form-group mb-3">
        <label asp-for="NewsArticle.NewsArticleId" class="control-label"></label>
        <input asp-for="NewsArticle.NewsArticleId" class="form-control" />
        <span asp-validation-for="NewsArticle.NewsArticleId" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="NewsArticle.NewsTitle" class="control-label"></label>
        <input asp-for="NewsArticle.NewsTitle" class="form-control" />
        <span asp-validation-for="NewsArticle.NewsTitle" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="NewsArticle.Headline" class="control-label"></label>
        <input asp-for="NewsArticle.Headline" class="form-control" />
        <span asp-validation-for="NewsArticle.Headline" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="NewsArticle.CreatedDate" class="control-label"></label>
        <input asp-for="NewsArticle.CreatedDate" class="form-control" type="datetime-local" />
        <span asp-validation-for="NewsArticle.CreatedDate" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="NewsArticle.NewsContent" class="control-label"></label>
        <textarea asp-for="NewsArticle.NewsContent" class="form-control" rows="6"></textarea>
        <span asp-validation-for="NewsArticle.NewsContent" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="NewsArticle.NewsSource" class="control-label"></label>
        <input asp-for="NewsArticle.NewsSource" class="form-control" />
        <span asp-validation-for="NewsArticle.NewsSource" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="NewsArticle.CategoryId" class="control-label"></label>
        <select asp-for="NewsArticle.CategoryId" class="form-control" asp-items="Model.CategoryOptions">
            <option value="">-- Select Category --</option>
        </select>
        <span asp-validation-for="NewsArticle.CategoryId" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="NewsArticle.NewsStatus" class="control-label"></label>
        <select asp-for="NewsArticle.NewsStatus" class="form-control">
            <option value="true">Active</option>
            <option value="false">Inactive</option>
        </select>
        <span asp-validation-for="NewsArticle.NewsStatus" class="text-danger"></span>
    </div>

    <!-- Hidden field for CreatedById -->
    <input asp-for="NewsArticle.CreatedById" type="hidden" />

    <div class="form-group mb-3">
        <label class="control-label">Select Tags</label>
        <div id="tagContainer">
            <!-- Tag dropdowns will be added here dynamically -->
        </div>
        <button type="button" id="addTagBtn" class="btn btn-secondary btn-sm mt-2">+ Add Tag</button>
    </div>

    <div class="form-group mt-4">
        <button type="submit" class="btn btn-primary">Create News Article</button>
        <a asp-page="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

<div class="mt-3">
    <a asp-page="Index">Back to List</a>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        let tagIndex = 0;
        let allTags = [];

        // Get tags data from server
        @if (Model.AllTags != null && Model.AllTags.Any())
        {
            <text>
                allTags = [
                @for (int i = 0; i < Model.AllTags.Count; i++)
                {
                    <text>
                            {
                                tagId: @Model.AllTags[i].TagId,
                                tagName: "@Html.Raw(Model.AllTags[i].TagName.Replace("\"", "\\\""))"
                            }@(i < Model.AllTags.Count - 1 ? "," : "")
                    </text>
                }
                ];
            </text>
        }

        console.log('All tags loaded:', allTags);

        function getSelectedTagIds() {
            const selectedTagIds = [];
            document.querySelectorAll('.tag-select').forEach(select => {
                const value = parseInt(select.value);
                if (value > 0) {
                    selectedTagIds.push(value);
                }
            });
            return selectedTagIds;
        }

        function getAvailableTags(excludeCurrentSelect = null) {
            const selectedTagIds = [];
            document.querySelectorAll('.tag-select').forEach(select => {
                if (select !== excludeCurrentSelect) {
                    const value = parseInt(select.value);
                    if (value > 0) {
                        selectedTagIds.push(value);
                    }
                }
            });

            return allTags.filter(tag => !selectedTagIds.includes(tag.tagId));
        }

        function createTagDropdown(selectedTagId = 0) {
            const tagDiv = document.createElement('div');
            tagDiv.className = 'tag-item mb-2 d-flex align-items-center';

            const select = document.createElement('select');
            select.className = 'form-control tag-select me-2';
            select.name = `TagIds[${tagIndex}]`;
            select.addEventListener('change', function() {
                updateAllDropdowns();
            });

            // Add default option
            const defaultOption = document.createElement('option');
            defaultOption.value = '0';
            defaultOption.textContent = '-- Select Tag --';
            select.appendChild(defaultOption);

            // Get available tags (excluding already selected ones)
            const availableTags = getAvailableTags();

            // Add available tags
            availableTags.forEach(tag => {
                const option = document.createElement('option');
                option.value = tag.tagId;
                option.textContent = tag.tagName;
                if (tag.tagId === selectedTagId) {
                    option.selected = true;
                }
                select.appendChild(option);
            });

            // If selectedTagId is provided and not in available tags, add it anyway
            if (selectedTagId > 0) {
                const selectedTag = allTags.find(tag => tag.tagId === selectedTagId);
                if (selectedTag && !availableTags.find(tag => tag.tagId === selectedTagId)) {
                    const option = document.createElement('option');
                    option.value = selectedTag.tagId;
                    option.textContent = selectedTag.tagName;
                    option.selected = true;
                    select.appendChild(option);
                }
            }

            // Add remove button
            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'btn btn-danger btn-sm';
            removeBtn.textContent = 'Remove';
            removeBtn.addEventListener('click', function() {
                tagDiv.remove();
                updateAllDropdowns();
            });

            tagDiv.appendChild(select);
            tagDiv.appendChild(removeBtn);

            tagIndex++;
            return tagDiv;
        }

        function updateAllDropdowns() {
            const tagSelects = document.querySelectorAll('.tag-select');

            tagSelects.forEach(currentSelect => {
                const currentValue = parseInt(currentSelect.value);
                const availableTags = getAvailableTags(currentSelect);

                // Clear and rebuild options
                currentSelect.innerHTML = '';

                // Add default option
                const defaultOption = document.createElement('option');
                defaultOption.value = '0';
                defaultOption.textContent = '-- Select Tag --';
                currentSelect.appendChild(defaultOption);

                // Add available tags
                availableTags.forEach(tag => {
                    const option = document.createElement('option');
                    option.value = tag.tagId;
                    option.textContent = tag.tagName;
                    currentSelect.appendChild(option);
                });

                // Add current selected tag if it's not in available tags
                if (currentValue > 0) {
                    const currentTag = allTags.find(tag => tag.tagId === currentValue);
                    if (currentTag && !availableTags.find(tag => tag.tagId === currentValue)) {
                        const option = document.createElement('option');
                        option.value = currentTag.tagId;
                        option.textContent = currentTag.tagName;
                        currentSelect.appendChild(option);
                    }
                    currentSelect.value = currentValue;
                }
            });
        }

        // Add tag button event
        document.getElementById('addTagBtn').addEventListener('click', function() {
            if (allTags.length === 0) {
                alert('No tags available. Please check if tags are loaded properly.');
                return;
            }

            // Check if all tags are already selected
            const selectedTagIds = getSelectedTagIds();
            if (selectedTagIds.length >= allTags.length) {
                alert('All available tags have been selected.');
                return;
            }

            const tagContainer = document.getElementById('tagContainer');
            const newTagDropdown = createTagDropdown();
            tagContainer.appendChild(newTagDropdown);
            updateAllDropdowns();
        });

        // Form submission validation
        document.getElementById('createForm').addEventListener('submit', function(e) {
            // Remove any empty tag selects before submission
            document.querySelectorAll('.tag-select').forEach(select => {
                if (select.value === '0') {
                    select.name = ''; // Remove name so it won't be submitted
                }
            });
        });

        // Initialize with one tag dropdown
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing tags...');
            console.log('Available tags:', allTags);

            if (allTags.length > 0) {
                const tagContainer = document.getElementById('tagContainer');
                const initialTagDropdown = createTagDropdown();
                tagContainer.appendChild(initialTagDropdown);
            } else {
                console.error('No tags loaded!');
                document.getElementById('addTagBtn').style.display = 'none';
                const tagContainer = document.getElementById('tagContainer');
                tagContainer.innerHTML = '<div class="alert alert-warning">No tags available. Please contact administrator.</div>';
            }
        });
    </script>
}
